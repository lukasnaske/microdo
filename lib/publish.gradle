apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'


group 'at.naske.microdo'
version '0.0.2'

project.ext {
    mavGitUrl = 'https://github.com/lukasnaske/microdo'
    mavProjectName = 'MicroDO'
    mavLibraryLicenses = ["MIT": 'https://opensource.org/licenses/MIT']
    mavLibraryDescription = "Software comopnents supporting the implementation of multimedia applcations for Android"
    mavPublishToMavenLocal = true
    mavSiteUrl = 'https://github.com/lukasnaske/microdo'
}

def properties = new Properties()
properties.load(new FileInputStream("bintray.properties"))

bintray {
    user = properties.getProperty("user")
    key = properties.getProperty("key")
    publications = ['Production']
    configurations = ['archives']
    override = true
    pkg {
        repo = 'MicroDO'
        name = 'MicroDO'
        description = "Software comopnents supporting the implementation of multimedia applcations on Android"
        publicDownloadNumbers = true
        licenses = ['MIT']
        vcsUrl = 'https://github.com/lukasnaske/microdo'
        version {
            name = this.version
            desc = "Version ${this.version}"
            released = new Date()
            vcsTag = this.version
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
publishing {
    publications {

        Production(MavenPublication) {
            artifact("$buildDir/outputs/aar/lib-release.aar")  {
                builtBy tasks.getByName("assemble")
            }
            artifact sourcesJar
            pom.withXml {
                def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}